//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoStore
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class VideoStoreEntities : DbContext
    {
        public VideoStoreEntities()
            : base("name=VideoStoreEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<VideoOrder> VideoOrders { get; set; }
        public virtual DbSet<Video> Videos { get; set; }
    
        public virtual int AddVideo(string videoTitle, Nullable<System.DateTime> videoReleaseDate, string videoGenre, string videoPrice)
        {
            var videoTitleParameter = videoTitle != null ?
                new ObjectParameter("VideoTitle", videoTitle) :
                new ObjectParameter("VideoTitle", typeof(string));
    
            var videoReleaseDateParameter = videoReleaseDate.HasValue ?
                new ObjectParameter("VideoReleaseDate", videoReleaseDate) :
                new ObjectParameter("VideoReleaseDate", typeof(System.DateTime));
    
            var videoGenreParameter = videoGenre != null ?
                new ObjectParameter("VideoGenre", videoGenre) :
                new ObjectParameter("VideoGenre", typeof(string));
    
            var videoPriceParameter = videoPrice != null ?
                new ObjectParameter("VideoPrice", videoPrice) :
                new ObjectParameter("VideoPrice", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddVideo", videoTitleParameter, videoReleaseDateParameter, videoGenreParameter, videoPriceParameter);
        }
    
        public virtual int AddNewCustomer(string customerName, string customerEmail, string customerPhone)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerEmailParameter = customerEmail != null ?
                new ObjectParameter("CustomerEmail", customerEmail) :
                new ObjectParameter("CustomerEmail", typeof(string));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewCustomer", customerNameParameter, customerEmailParameter, customerPhoneParameter);
        }
    
        public virtual ObjectResult<RetrieveCustomerByName_Result> RetrieveCustomerByName(string customerName)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RetrieveCustomerByName_Result>("RetrieveCustomerByName", customerNameParameter);
        }
    
        public virtual int AddNewOrder(Nullable<decimal> orderPrice, Nullable<System.DateTime> orderDate, Nullable<int> orderCustomer)
        {
            var orderPriceParameter = orderPrice.HasValue ?
                new ObjectParameter("OrderPrice", orderPrice) :
                new ObjectParameter("OrderPrice", typeof(decimal));
    
            var orderDateParameter = orderDate.HasValue ?
                new ObjectParameter("OrderDate", orderDate) :
                new ObjectParameter("OrderDate", typeof(System.DateTime));
    
            var orderCustomerParameter = orderCustomer.HasValue ?
                new ObjectParameter("OrderCustomer", orderCustomer) :
                new ObjectParameter("OrderCustomer", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewOrder", orderPriceParameter, orderDateParameter, orderCustomerParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RetrieveCustomerId(string customerName)
        {
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RetrieveCustomerId", customerNameParameter);
        }
    
        public virtual int AddNewVideoOrder(Nullable<int> videoId, Nullable<int> orderId)
        {
            var videoIdParameter = videoId.HasValue ?
                new ObjectParameter("VideoId", videoId) :
                new ObjectParameter("VideoId", typeof(int));
    
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewVideoOrder", videoIdParameter, orderIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> RetrieveVideoIds(Nullable<int> orderId)
        {
            var orderIdParameter = orderId.HasValue ?
                new ObjectParameter("OrderId", orderId) :
                new ObjectParameter("OrderId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("RetrieveVideoIds", orderIdParameter);
        }
    }
}
